server {
  listen   <%= node.elasticsearch[:nginx][:port] %>;
  server_name  elasticsearch;
  client_max_body_size <%= node.elasticsearch[:nginx][:client_max_body_size] %>;

  error_log   <%= node.elasticsearch[:nginx][:log_dir] %>/elasticsearch-errors.log;
  access_log  <%= node.elasticsearch[:nginx][:log_dir] %>/elasticsearch.log;

  location / {

    # Deny Nodes Shutdown API
    if ($request_filename ~ "_shutdown") {
      return 403;
      break;
    }

<% unless node.elasticsearch[:nginx][:allow_cluster_api] %>
    # Deny access to Cluster API
    if ($request_filename ~ "_cluster") {
      return 403;
      break;
    }
<% end %>

    # Pass requests to ElasticSearch
    proxy_pass http://<%= node.elasticsearch.network.host rescue 'localhost' %>:<%= node.elasticsearch.http.port rescue '9200' %>;
    proxy_redirect off;

    proxy_set_header  X-Real-IP  $remote_addr;
    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header  Host $http_host;

    # For CORS Ajax
    proxy_pass_header Access-Control-Allow-Origin;
    proxy_pass_header Access-Control-Allow-Methods;
    proxy_hide_header Access-Control-Allow-Headers;
    add_header Access-Control-Allow-Headers 'X-Requested-With, Content-Type';
    add_header Access-Control-Allow-Credentials true;

<% unless node.elasticsearch[:nginx][:users].empty? %>
    # Authorize access
    auth_basic           "ElasticSearch";
    auth_basic_user_file <%= node.elasticsearch[:nginx][:passwords_file] %>;
<% end %>

  }

<% if node.elasticsearch[:nginx][:allow_status] %>
  location /status {
    proxy_method HEAD;
    proxy_intercept_errors on;
    proxy_pass http://localhost:<%= node.elasticsearch[:http][:port] %>/;
  }
<% end %>

}
