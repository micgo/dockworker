{
  "name": "docker",
  "description": "Installs/Configures Docker",
  "long_description": "# chef-docker [![Build Status](https://secure.travis-ci.org/bflad/chef-docker.png?branch=master)](http://travis-ci.org/bflad/chef-docker)\n\n## Description\n\nInstalls/Configures [Docker](http://docker.io). Please see [COMPATIBILITY.md](COMPATIBILITY.md) for more information about Docker versions that are tested and supported by cookbook versions along with LWRP features.\n\nThis cookbook was inspired by @thoward's docker-cookbook: https://github.com/thoward/docker-cookbook\n\n## Requirements\n\n### Chef\n\n* Chef 11+\n\n### Platforms\n\n* CentOS 6\n* Debian 7\n* Fedora 19, 20\n* Mac OS X (only docker installation currently)\n* Oracle 6\n* RHEL 6\n* Ubuntu 12.04, 12.10, 13.04, 13.10\n\n### Cookbooks\n\n[Opscode Cookbooks](https://github.com/opscode-cookbooks/)\n\n* [apt](https://github.com/opscode-cookbooks/apt)\n* [git](https://github.com/opscode-cookbooks/git)\n* [homebrew](https://github.com/opscode-cookbooks/homebrew)\n* [yum-epel](https://github.com/opscode-cookbooks/yum-epel)\n\nThird-Party Cookbooks\n\n* [aufs](https://github.com/bflad/chef-aufs)\n* [device-mapper](https://github.com/bflad/chef-device-mapper)\n* [golang](https://github.com/NOX73/chef-golang)\n* [lxc](https://github.com/hw-cookbooks/lxc)\n* [modules](https://github.com/Youscribe/modules-cookbook)\n* [sysctl](https://github.com/onehealth-cookbooks/sysctl)\n\n## Usage\n\n### Default Installation\n\n* Add `recipe[docker]` to your node's run list\n\n### Execution Drivers\n\nIf your system is runs a Docker version before 0.9, you'll need to explicitly set up LXC outside of this cookbook. This will likely be true for most distros after Docker 1.0 and chef-docker 1.0 is released.\n* [lxc on community site](http://community.opscode.com/cookbooks/lxc)\n* [lxc on Github](https://github.com/hw-cookbooks/lxc/)\n\n### Storage Drivers\n\nBeginning in chef-docker 1.0, storage driver installation and configuration is expected to be handled before this cookbook's execution, except where required by Docker.\n\n#### AUFS\n\nIf you need AUFS support, consider adding the aufs cookbook to your node/recipe before docker.\n* [aufs on community site](http://community.opscode.com/cookbooks/aufs)\n* [chef-aufs on Github](https://github.com/bflad/chef-aufs)\n\nThen, set the `storage_driver` attribute of this cookbook to `aufs`.\n\n#### device-mapper\n\nIf you need device-mapper support, consider adding the device-mapper cookbook to your node/recipe before docker.\n* [device-mapper on community site](http://community.opscode.com/cookbooks/device-mapper)\n* [chef-device-mapper on Github](https://github.com/bflad/chef-device-mapper)\n\nThen, set the `storage_driver` attribute of this cookbook to `devicemapper` (please note lack of dash).\n\n## Attributes\n\n### Installation/System Attributes\n\nThese attributes are under the `node['docker']` namespace.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\narch | Architecture for docker binary (note: Docker only currently supports x86_64) | String | auto-detected (see attributes/default.rb)\ngroup_members | Users to manage in `node['docker']['group']` | Array of Strings | []\ninit_type | Init type for docker (\"runit\", \"systemd\", \"sysv\", or \"upstart\") | String | auto-detected (see attributes/default.rb)\ninstall_dir | Installation directory for docker binary (custom setting only valid for non-package installations) | String | auto-detected (see attributes/default.rb)\ninstall_type | Installation type for docker (\"binary\", \"package\" or \"source\") | String | package\nipv4_forward | Sysctl set net.ipv4.ip_forward to 1 | TrueClass, FalseClass | true\nipv6_forward | Sysctl set net.ipv6.conf.all.forwarding to 1 | TrueClass, FalseClass | true\nversion | Version of docker | String | nil\n\n#### Binary Installation Attributes\n\nThese attributes are under the `node['docker']['binary']` namespace.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\nchecksum | Optional SHA256 checksum for docker binary | String | auto-detected (see attributes/default.rb)\nversion | Version of docker binary | String | `node['docker']['version']` (if set) or `latest`\nurl | URL for downloading docker binary | String | `http://get.docker.io/builds/#{node['kernel']['name']}/#{node['docker']['arch']}/docker-#{node['docker']['binary']['version']}`\n\n#### Package Installation Attributes\n\nThese attributes are under the `node['docker']['package']` namespace.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ndistribution | Distribution for docker packages | String | auto-detected (see attributes/default.rb)\nrepo_url | Repository URL for docker packages | String | auto-detected (see attributes/default.rb)\n\n#### Source Installation Attributes\n\nThese attributes are under the `node['docker']['source']` namespace.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\nref | Repository reference for docker source | String | master\nurl | Repository URL for docker source | String | https://github.com/dotcloud/docker.git\n\n### Docker Daemon Attributes\n\nFor more information: http://docs.docker.io/en/latest/reference/commandline/cli/#daemon\n\nThese attributes are under the `node['docker']` namespace.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\napi_enable_cors | Enable CORS headers in API | TrueClass, FalseClass | nil\nbind_socket (*DEPRECATED*) | Socket path that docker should bind | String | unix:///var/run/docker.sock\nbind_uri (*DEPRECATED*) | TCP URI docker should bind | String | nil\nbip | Use this CIDR notation address for the network bridge's IP, not compatible with `bridge` | String | nil\nbridge | Attach containers to a pre-existing network bridge; use 'none' to disable container networking | String | nil\ndebug | Enable debug mode | TrueClass, FalseClass | nil (implicitly false)\ndns | DNS server(s) for containers | String, Array | nil\ndns_search | DNS search domain(s) for containers | String, Array | nil\nexec_driver | Execution driver for docker | String | nil (implicitly native as of 0.9.0)\ngraph | Path to use as the root of the docker runtime | String | nil (implicitly /var/lib/docker)\ngroup | Group for docker socket and group_members | String | nil (implicitly docker)\nhost | Socket(s) that docker should bind | String, Array | unix:///var/run/docker.sock\nhttp_proxy | HTTP_PROXY environment variable | String | nil\nicc | Enable inter-container communication | TrueClass, FalseClass | nil (implicitly true)\nip | Default IP address to use when binding container ports | String | nil (implicitly 0.0.0.0)\niptables | Enable Docker's addition of iptables rules | TrueClass, FalseClass | nil (implicitly true)\nlogfile | Set custom DOCKER_LOGFILE | String | nil\nmtu | Set the containers network MTU | Fixnum | nil (implicitly default route MTU or 1500 if no default route is available)\noptions | Additional options to pass to docker. These could be flags like \"-api-enable-cors\". | String | nil\npidfile | Path to use for daemon PID file | String | nil (implicitly /var/run/docker.pid)\nramdisk | Set DOCKER_RAMDISK when using RAM disk | TrueClass or FalseClass | false\nstorage_driver | Storage driver for docker | String | nil\ntls | Use TLS | TrueClass, FalseClass | nil (implicitly false)\ntlscacert | Trust only remotes providing a certificate signed by the CA given here | String | nil (implicitly ~/.docker/ca.pem)\ntlscert | Path to TLS certificate file | String | nil (implicitly ~/.docker/cert.pem)\ntlskey | Path to TLS key file | String | nil (implicitly ~/.docker/key.pem)\ntlsverify | Use TLS and verify the remote (daemon: verify client, client: verify daemon) | TrueClass, FalseClass | nil (implicitly false)\ntmpdir | TMPDIR environment variable | String | nil\n\n### LWRP Attributes\n\nThese attributes are under the `node['docker']` namespace.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ndocker_daemon_timeout | Timeout to wait for the docker daemon to start in seconds for LWRP commands | Fixnum | 10\n\n#### docker_container Attributes\n\nThese attributes are under the `node['docker']` namespace.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ncontainer_cmd_timeout | container LWRP default cmd_timeout seconds | Fixnum | 60\ncontainer_init_type | Init type for docker containers (nil, \"runit\", \"systemd\", \"sysv\", or \"upstart\") | String | `node['docker']['init_type']`\n\n#### docker_image Attributes\n\nThese attributes are under the `node['docker']` namespace.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\nimage_cmd_timeout | image LWRP default cmd_timeout seconds | Fixnum | 300\n\n#### docker_registry Attributes\n\nThese attributes are under the `node['docker']` namespace.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\nregistry_cmd_timeout | registry LWRP default cmd_timeout seconds | Fixnum | 60\n\n## Recipes\n\n* `recipe[docker]` Installs/Configures Docker\n* `recipe[docker::aufs]` Installs/Loads AUFS Linux module\n* `recipe[docker::binary]` Installs Docker binary\n* `recipe[docker::cgroups]` Installs/configures default platform Control Groups support\n* `recipe[docker::devicemapper]` Installs/Configures Device Mapper\n* `recipe[docker::group]` Installs/Configures docker group\n* `recipe[docker::lxc]` Installs/configures default platform LXC support\n* `recipe[docker::package]` Installs Docker via package\n* `recipe[docker::runit]` Installs/Starts Docker via runit\n* `recipe[docker::source]` Installs Docker via source\n* `recipe[docker::systemd]` Installs/Starts Docker via systemd\n* `recipe[docker::sysv]` Installs/Starts Docker via SysV\n* `recipe[docker::upstart]` Installs/Starts Docker via Upstart\n\n## LWRPs\n\n* docker_container: container operations\n* docker_image: image/repository operations\n* docker_registry: registry operations\n\n### Getting Started\n\nHere's a quick example of pulling the latest image and running a container with exposed ports (creates service automatically):\n\n```ruby\n# Pull latest image\ndocker_image 'samalba/docker-registry'\n\n# Run container exposing ports\ndocker_container 'samalba/docker-registry' do\n  detach true\n  port '5000:5000'\n  env 'SETTINGS_FLAVOR=local'\n  volume '/mnt/docker:/docker-storage'\nend\n```\n\nMaybe you want to automatically update your private registry with changes from your container?\n\n```ruby\n# Login to private registry\ndocker_registry 'https://docker-registry.example.com/' do\n  username 'shipper'\n  password 'iloveshipping'\nend\n\n# Pull tagged image\ndocker_image 'apps/crowsnest' do\n  tag 'not-latest'\nend\n\n# Run container\ndocker_container 'crowsnest'\n\n# Save current timestamp\ntimestamp = Time.new.strftime('%Y%m%d%H%M')\n\n# Commit container changes\ndocker_container 'crowsnest' do\n  repository 'apps'\n  tag timestamp\n  action :commit\nend\n\n# Push image\ndocker_image 'crowsnest' do\n  repository 'apps'\n  tag timestamp\n  action :push\nend\n```\n\nSee full documentation for each LWRP and action below for more information.\n\n### docker_container\n\nBelow are the available actions for the LWRP, default being `run`.\n\nThese attributes are associated with all LWRP actions.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ncmd_timeout | Timeout for docker commands (catchable exception: `Chef::Provider::Docker::Container::CommandTimeout`)| Integer | `node['docker']['container_cmd_timeout']`\ncommand | Command to run in or identify container | String | nil\ncontainer_name | Name for container/service | String | nil\n\n#### docker_container action :commit\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\nauthor | Author for commit | String | nil\nmessage | Message for commit | String | nil\nrepository | Remote repository | String | nil\nrun | Configuration to be applied when the image is launched with `docker run` | String | nil\ntag | Specific tag for image | String | nil\n\nCommit a container with optional repository, run specification, and tag:\n\n```ruby\ndocker_container 'myApp' do\n  repository 'myRepo'\n  tag Time.new.strftime(\"%Y%m%d%H%M\")\n  run '{\"Cmd\": [\"cat\", \"/world\"], \"PortSpecs\": [\"22\"]}'\n  action :commit\nend\n```\n\n#### docker_container action :cp\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ndestination | Host path to copy file | String | nil\nsource | Container path to get file | String | nil\n\nCopying a file from container to host:\n\n```ruby\ndocker_container 'myApp' do\n  source '/path/to/container/file'\n  destination '/path/to/save/on/host'\n  action :cp\nend\n```\n\n#### docker_container action :export\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ndestination | Host path to save tarball | String | nil\n\nExporting container to host:\n\n```ruby\ndocker_container 'myApp' do\n  destination '/path/to/save/on/host.tgz'\n  action :export\nend\n```\n\n#### docker_container action :kill\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ncookbook | Cookbook to grab any templates | String | docker\ninit_type | Init type for container service handling | FalseClass, String | `node['docker']['container_init_type']`\ninit_template | Template to use for init configuration | String | nil\nsignal | Signal to send to the container | String | nil (implicitly KILL)\nsocket_template | Template to use for configuring socket (relevent for init_type systemd only) | String | nil\n\nKill a running container:\n\n```ruby\ndocker_container 'shipyard' do\n  action :kill\nend\n```\n\nSend SIGQUIT to a running container:\n\n```ruby\ndocker_container 'shipyard' do\n  signal 'QUIT'\n  action :kill\nend\n```\n\n#### docker_container action :redeploy\n\nStops, removes, and runs a container. Useful for notifications from image build/pull.\n\nAttributes for this action can be found in the `stop`, `remove`, and `run` actions.\n\nRedeploy container when new image is pulled:\n\n```ruby\ndocker_image 'shipyard/shipyard' do\n  action :pull\n  notifies :redeploy, 'docker_container[shipyard]', :immediately\nend\n\ndocker_container 'shipyard' do\n  # Other attributes\n  action :run\nend\n```\n\n#### docker_container action :remove\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ncookbook | Cookbook to grab any templates | String | docker\ninit_type | Init type for container service handling | FalseClass, String | `node['docker']['container_init_type']`\ninit_template | Template to use for init configuration | String | nil\nlink | Add link to another container | String, Array | nil\nsocket_template | Template to use for configuring socket (relevent for init_type systemd only) | String | nil\n\nRemove a container:\n\n```ruby\ndocker_container 'shipyard' do\n  action :remove\nend\n```\n\n#### docker_container action :restart\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ncookbook | Cookbook to grab any templates | String | docker\ninit_type | Init type for container service handling | FalseClass, String | `node['docker']['container_init_type']`\ninit_template | Template to use for init configuration | String | nil\nsocket_template | Template to use for configuring socket (relevent for init_type systemd only) | String | nil\n\nRestart a container:\n\n```ruby\ndocker_container 'shipyard' do\n  action :restart\nend\n```\n\n#### docker_container action :run\n\nBy default, this will handle creating a service for the container when action is run or start. `set['docker']['container_init_type'] = false` or add `init_type false` for LWRP to disable this behavior.\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\nattach | Attach container's stdout/stderr and forward all signals to the process | TrueClass, FalseClass | nil\ncidfile | File to store container ID | String | nil\ncontainer_name | Name for container/service | String | nil\ncookbook | Cookbook to grab any templates | String | docker\ncpu_shares | CPU shares for container | Fixnum | nil\ndetach | Detach from container when starting | TrueClass, FalseClass | nil\ndns | DNS servers for container | String, Array | nil\ndns_search | DNS search domains for container | String, Array | nil\nentrypoint | Overwrite the default entrypoint set by the image | String | nil\nenv | Environment variables to pass to container | String, Array | nil\nenv_file | Read in a line delimited file of ENV variables | String | nil\nexpose | Expose a port from the container without publishing it to your host | Fixnum, String, Array | nil\nhostname | Container hostname | String | nil\nimage | Image for container | String | LWRP name\ninit_type | Init type for container service handling | FalseClass, String | `node['docker']['container_init_type']`\ninit_template | Template to use for init configuration | String | nil\nlink | Add link to another container | String, Array | nil\nlabel | Options to pass to underlying labeling system | String | nil\nlxc_conf | Custom LXC options | String, Array | nil\nmemory | Set memory limit for container | Fixnum | nil\nnetworking | Configure networking for container | TrueClass, FalseClass | true\nopt | Custom driver options | String, Array | nil\nport | Map network port(s) to the container | Fixnum (*DEPRECATED*), String, Array | nil\nprivileged | Give extended privileges | TrueClass, FalseClass | nil\npublic_port (*DEPRECATED*) | Map host port to container | Fixnum | nil\npublish_exposed_ports | Publish all exposed ports to the host interfaces | TrueClass, FalseClass | false\nremove_automatically | Automatically remove the container when it exits (incompatible with detach) | TrueClass, FalseClass | false\nsocket_template | Template to use for configuring socket (relevent for init_type systemd only) | String | nil\nstdin | Attach container's stdin | TrueClass, FalseClass | nil\ntty | Allocate a pseudo-tty | TrueClass, FalseClass | nil\nuser | User to run container | String | nil\nvolume | Create bind mount(s) with: [host-dir]:[container-dir]:[rw|ro]. If \"container-dir\" is missing, then docker creates a new volume. | String, Array | nil\nvolumes_from | Mount all volumes from the given container(s) | String | nil\nworking_directory | Working directory inside the container | String | nil\n\nRun a container:\n\n```ruby\ndocker_container 'myImage' do\n  detach true\nend\n```\n\nRun a container via command:\n\n```ruby\ndocker_container 'busybox' do\n  command 'sleep 9999'\n  detach true\nend\n```\n\nRun a container from image (docker-registry for example):\n\n```ruby\ndocker_container 'docker-registry' do\n  image 'samalba/docker-registry'\n  detach true\n  hostname 'docker-registry.example.com'\n  port '5000:5000'\n  env 'SETTINGS_FLAVOR=local'\n  volume '/mnt/docker:/docker-storage'\nend\n```\n\n#### docker_container action :start\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\nattach | Attach container's stdout/stderr and forward all signals to the cookbook | Cookbook to grab any templates | String | docker\ninit_type | Init type for container service handling | FalseClass, String | `node['docker']['container_init_type']`\ninit_template | Template to use for init configuration | String | nil\nsocket_template | Template to use for configuring socket (relevent for init_type systemd only) | String | nil\nstdin | Attach container's stdin | TrueClass, FalseClass | nil\n\nStart a stopped container:\n\n```ruby\ndocker_container 'shipyard' do\n  action :start\nend\n```\n\n#### docker_container action :stop\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ncookbook | Cookbook to grab any templates | String | docker\ninit_type | Init type for container service handling | FalseClass, String | `node['docker']['container_init_type']`\ninit_template | Template to use for init configuration | String | nil\nsocket_template | Template to use for configuring socket (relevent for init_type systemd only) | String | nil\n\nStop a running container:\n\n```ruby\ndocker_container 'shipyard' do\n  action :stop\nend\n```\n\n#### docker_container action :wait\n\nWait for a container to finish:\n\n```ruby\ndocker_container 'busybox' do\n  command 'sleep 9999'\n  action :wait\nend\n```\n\n### docker_image\n\nBelow are the available actions for the LWRP, default being `pull`.\n\nThese attributes are associated with all LWRP actions.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ncmd_timeout | Timeout for docker commands (catchable exception: `Chef::Provider::Docker::Image::CommandTimeout`) | Integer | `node['docker']['image_cmd_timeout']`\n\n#### docker_image action :build and :build_if_missing\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ndockerfile (*DEPRECATED*) | Dockerfile to build image | String | nil\nimage_url (*DEPRECATED*) | URL to grab image | String | nil\nno_cache | Do not use the cache when building the image | TrueClass, FalseClass | false\npath (*DEPRECATED*) | Local path to files | String | nil\nrm | Remove intermediate containers after a successful build | TrueClass, FalseClass | false\nsource | Source dockerfile/directory/URL to build | String | nil\ntag | Optional tag for image | String | nil\n\nBuild image from Dockerfile:\n\n```ruby\ndocker_image 'myImage' do\n  tag 'myTag'\n  source 'myImageDockerfile'\n  action :build_if_missing\nend\n```\n\nBuild image from remote repository:\n\n```ruby\ndocker_image 'myImage' do\n  source 'example.com/foo/myImage'\n  tag 'myTag'\n  action :build_if_missing\nend\n```\n\nConditionally rebuild image if changes upstream:\n\n```ruby\ngit \"#{Chef::Config[:file_cache_path]}/docker-testcontainerd\" do\n  repository 'git@github.com:bflad/docker-testcontainerd.git'\n  notifies :build, 'docker_image[bflad/testcontainerd]', :immediately\nend\n\ndocker_image 'bflad/testcontainerd' do\n  action :pull_if_missing\nend\n```\n\n#### docker_image action :import\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\nimage_url (*DEPRECATED*) | URL to grab image | String | nil\nrepository | Optional repository | String | nil\nsource | Source file/directory/URL | String | nil\ntag | Optional tag for image | String | nil\n\nImport image from local directory:\n\n```ruby\ndocker_image 'test' do\n  source '/path/to/test'\n  action :import\nend\n```\n\nImport image from local file:\n\n```ruby\ndocker_image 'test' do\n  source '/path/to/test.tgz'\n  action :import\nend\n```\n\nImport image from remote URL:\n\n```ruby\ndocker_image 'test' do\n  source 'https://example.com/testimage.tgz'\n  action :import\nend\n```\n\n#### docker_image action :insert\n\n*ACTION DEPRECATED AS OF DOCKER 0.10.0*\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ndestination | Destination path/URL | String | nil\nsource | Source path/URL | String | nil\n\nInsert file from remote URL:\n\n```ruby\ndocker_image 'test' do\n  source 'http://example.com/some/file.txt'\n  destination '/container/path/for/some/file.txt'\n  action :insert\nend\n```\n\n#### docker_image action :load\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ninput | Image source (via tar archive file) | String | nil\nsource | Image source (via stdin) | String | nil\n\nLoad repository via input:\n\n```ruby\ndocker_image 'test' do\n  input '/path/to/test.tar'\n  action :load\nend\n```\n\nLoad repository via stdin:\n\n```ruby\ndocker_image 'test' do\n  source '/path/to/test.tgz'\n  action :load\nend\n```\n\n#### docker_image action :pull and :pull_if_missing\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\nregistry | Optional registry server | String | nil\ntag | Optional tag for image | String | nil\n\nPull latest image every Chef run:\n\n```ruby\ndocker_image 'busybox'\n```\n\nPull latest image only if missing:\n\n```ruby\ndocker_image 'busybox' do\n  action :pull_if_missing\nend\n```\n\nPull tagged image:\n\n```ruby\ndocker_image 'bflad/test' do\n  tag 'not-latest'\nend\n```\n\n#### docker_image action :push\n\nPush image (after logging in with `docker_registry`):\n\n```ruby\ndocker_image 'bflad/test' do\n  action :push\nend\n```\n\n#### docker_image action :remove\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\nforce | Force removal | TrueClass, FalseClass | nil\nno_prune | Do not delete untagged parents | TrueClass, FalseClass | nil\n\nRemove image:\n\n```ruby\ndocker_image 'busybox' do\n  action :remove\nend\n```\n\n#### docker_image action :save\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ndestination | Destination path (via stdout) | String | nil\noutput | Destination path (via file) | String | nil\ntag | Save specific tag | String | nil\n\nSave repository via file to path:\n\n```ruby\ndocker_image 'test' do\n  destination '/path/to/test.tar'\n  action :save\nend\n```\n\nSave repository via stdout to path:\n\n```ruby\ndocker_image 'test' do\n  destination '/path/to/test.tgz'\n  action :save\nend\n```\n\n#### docker_image action :tag\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\nforce | Force operation | Boolean | false\nrepository | Remote repository | String | nil\ntag | Specific tag for image | String | nil\n\nTag image:\n\n```ruby\ndocker_image 'test' do\n  repository 'bflad'\n  tag '1.0.0'\n  action :tag\nend\n```\n\n### docker_registry\n\nThese attributes are associated with all LWRP actions.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\ncmd_timeout | Timeout for docker commands (catchable exception: `Chef::Provider::Docker::Registry::CommandTimeout`) | Integer | `node['docker']['registry_cmd_timeout']`\n\n#### docker_registry action :login\n\nThese attributes are associated with this LWRP action.\n\nAttribute | Description | Type | Default\n----------|-------------|------|--------\nemail | Registry email | String | nil\npassword | Registry password | String | nil\nusername | Registry username | String | nil\n\nLog into or register with public registry:\n\n    docker_registry 'https://index.docker.io/v1/' do\n      email 'publicme@example.com'\n      username 'publicme'\n      password 'hope_this_is_in_encrypted_databag'\n    end\n\nLog into private registry with optional port:\n\n    docker_registry 'https://docker-registry.example.com:8443/' do\n      username 'privateme'\n      password 'still_hope_this_is_in_encrypted_databag'\n    end\n\n## Testing and Development\n\n* Quickly testing with Vagrant: [VAGRANT.md](VAGRANT.md)\n* Full development and testing workflow with Test Kitchen and friends: [TESTING.md](TESTING.md)\n\n## Contributing\n\nPlease see contributing information in: [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## Maintainers\n\n* Brian Flad (<bflad417@gmail.com>)\n\n## License\n\nPlease see licensing information in: [LICENSE](LICENSE)\n",
  "maintainer": "Brian Flad",
  "maintainer_email": "bflad417@gmail.com",
  "license": "Apache 2.0",
  "platforms": {
    "centos": ">= 6.0",
    "debian": ">= 7.0",
    "fedora": ">= 19.0",
    "mac_os_x": ">= 0.0.0",
    "mac_os_x_server": ">= 0.0.0",
    "oracle": ">= 6.0",
    "redhat": ">= 6.0",
    "ubuntu": ">= 12.04"
  },
  "dependencies": {
    "apt": ">= 0.0.0",
    "aufs": ">= 0.1.1",
    "device-mapper": ">= 0.1.0",
    "git": ">= 0.0.0",
    "golang": ">= 0.0.0",
    "homebrew": ">= 0.0.0",
    "lxc": ">= 1.1.6",
    "modules": ">= 0.0.0",
    "runit": ">= 0.0.0",
    "sysctl": ">= 0.0.0",
    "yum-epel": ">= 0.0.0"
  },
  "recommendations": {
  },
  "suggestions": {
  },
  "conflicting": {
  },
  "providing": {
  },
  "replacing": {
  },
  "attributes": {
  },
  "groupings": {
  },
  "recipes": {
    "docker": "Installs/Configures Docker",
    "docker::aufs": "Installs/Loads AUFS Linux module",
    "docker::binary": "Installs Docker binary",
    "docker::cgroups": "Installs/configures default platform Control Groups support",
    "docker::devicemapper": "Installs/Configures Device Mapper",
    "docker::group": "Installs/Configures docker group",
    "docker::lxc": "Installs/configures default platform LXC support",
    "docker::package": "Installs Docker via package",
    "docker::runit": "Installs/Starts Docker via runit",
    "docker::source": "Installs Docker via source",
    "docker::systemd": "Installs/Starts Docker via systemd",
    "docker::sysv": "Installs/Starts Docker via SysV",
    "docker::upstart": "Installs/Starts Docker via Upstart"
  },
  "version": "0.34.1"
}